WHAT logic -> one method is brute force ,here you can fix a number let x, and scan the entire array we need to find a num  let say y whose sum is equal to target
  time complexity  o(n^2) 
optimised method -> using hashmap who store a val of array with those indices, and we find after each iteration complement of num let call (target - num) if this contains map 
     print those indices of nums and its complement otherwise insert the nums in the map

     time complexity o(nlogn) 
     s . c = o(1)

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
     
        map<int,int> map;
        for(int i=0;i<nums.size();i++){
            int comp = target - nums[i];
            if(map.find(comp) != map.end()){
                return {map[comp] , i};
            }else{
                map[nums[i]] = i;
            }
            
        }
        return {};
    }
};
